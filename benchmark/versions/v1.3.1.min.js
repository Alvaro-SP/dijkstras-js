var Dijkstras_1_3_1=function(){var h=function(){this.graph=[];this.queue;this.distance=[];this.previous=[]};h.prototype.setGraph=function(d){if("object"!==typeof d)throw"graph isn't an object ("+typeof d+")";if(1>d.length)throw"graph is empty";for(var b in d){var a=d[b];if("object"!==typeof a||2!==a.length)throw"node must be an array and contain 2 values (name, vertices). Failed at index: "+b;var c=a[0],a=a[1];this.graph[c]=[];for(var e in a){var f=a[e];if("object"!==typeof f||2!==f.length)throw"vertex must be an array and contain 2 values (name, vertices). Failed at index: "+
b+"["+e+"]";this.graph[c][f[0]]=f[1]}}};h.prototype.getPath=function(d,b){if("undefined"===typeof this.graph[d])throw"source "+d+" doesn't exist";if("undefined"===typeof this.graph[b])throw"target "+b+" doesn't exist";if(d===b)return[];this.queue=new k;this.queue.add(d,0);for(var a=this.previous[d]=null;a=this.queue.shift();){if(a===b){for(var c=[];null!=this.previous[a];)c.unshift(a),a=this.previous[a];return c}if(Infinity==this.queue.getDistance(a))break;for(c in this.graph[a]){var e=this.queue.getDistance(a),
f=this.queue.getDistance(c),e=e+this.graph[a][c];e<f&&(this.queue.update(c,e),this.previous[c]=a)}}return[]};var k=function(){var d=function(){this.min=null;this.roots=[];this.nodes=[];this.depthCache=[[],[],[],[],[],[],[]];this.depthMax=this.depthCache.length-1};d.prototype.shift=function(){var b=this.min;if(null==b||1>this.roots.length)return this.min=null,b;this.remove(b);100<this.roots.length&&this.consolidate();for(var a=Infinity,c=this.roots.length,e=0;e<c;e++){var d=this.roots[e],g=this.getDistance(d);
g<a&&(a=g,this.min=d)}return b};d.prototype.consolidate=function(){for(var b=0;b<=this.depthMax;b++)for(;1<this.depthCache[b].length;){var a=this.depthCache[b].shift(),c=this.depthCache[b].shift(),e=b+1,d=-1;this.nodes[a].distance<this.nodes[c].distance?(this.nodes[a].depth=e,this.nodes[a].children.push(c),this.nodes[c].parent=a,e<=this.depthMax&&this.depthCache[e].push(a),d=this.roots.indexOf(c)):(this.nodes[c].depth=e,this.nodes[c].children.push(a),this.nodes[a].parent=c,e<=this.depthMax&&this.depthCache[e].push(c),
d=this.roots.indexOf(a));-1<d&&this.roots.splice(d,1)}};d.prototype.add=function(b,a){this.nodes[b]={node:b,distance:a,depth:0,parent:null,children:[]};if(!this.min||this.nodes[b].distance<this.nodes[this.min].distance)this.min=b;this.roots.push(b);this.depthCache[0].push(b)};d.prototype.update=function(b,a){this.remove(b);this.add(b,a)};d.prototype.remove=function(b){if(this.nodes[b]){var a=this.nodes[b];if(null==a.parent){var c=a.depth;if(c<=this.depthMax){var d=this.depthCache[c].indexOf(b);-1<
d&&this.depthCache[c].splice(d,1)}}d=a.children.length;if(0<d)for(var f=0;f<d;f++){var g=a.children[f];this.nodes[g].parent=a.parent;null==a.parent&&this.roots.push(g);c=this.nodes[g].depth;c<=this.depthMax&&this.depthCache[c].push(g)}if(null==a.parent)d=this.roots.indexOf(b),-1<d&&this.roots.splice(d,1);else{c=a.parent;for(b=null;c;)b=c,this.nodes[c].depth--,c=this.nodes[c].parent;c=this.nodes[b].depth;c<=this.depthMax&&this.depthCache[c].push(b)}}};d.prototype.getDistance=function(b){return this.nodes[b]?
this.nodes[b].distance:Infinity};return d}();return h}();