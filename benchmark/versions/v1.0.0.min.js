var Dijkstras_1_0_0=function(){this.graph=[];this.setGraph=function(d){if("object"!==typeof d)throw"graph isn't an object ("+typeof d+")";if(1>d.length)throw"graph is empty";for(var e in d){var b=d[e];if("object"!==typeof b||2!==b.length)throw"node must be an array and contain 2 values (name, vertices). Failed at index: "+e;var c=b[0],b=b[1];this.graph[c]=[];for(var f in b){var a=b[f];if("object"!==typeof a||2!==a.length)throw"vertex must be an array and contain 2 values (name, vertices). Failed at index: "+
e+"["+f+"]";this.graph[c][a[0]]=a[1]}}};this.getPath=function(d,e){if("undefined"===typeof this.graph[d])throw"source "+d+" doesn't exist";if("undefined"===typeof this.graph[e])throw"target "+e+" doesn't exist";var b=[],c=[],f=[],a;for(a in this.graph)c[a]=Infinity,f[a]=null,b[b.length]=a;for(c[d]=0;0<b.length;){b.sort(function(a,b){return c[a]-c[b]});a=b.shift();if(a===e){for(b=[];null!==f[a];)b.unshift(a),a=f[a];return b}if(Infinity==c[a])break;for(var g in this.graph[a]){var h=c[a]+this.graph[a][g];
h<c[g]&&(c[g]=h,f[g]=a)}}return[]}};