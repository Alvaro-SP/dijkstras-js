var Dijkstras_1_1_0=function(){this.graph=[];this.queue;this.distance=[];this.previous=[];this.setGraph=function(b){if("object"!==typeof b)throw"graph isn't an object ("+typeof b+")";if(1>b.length)throw"graph is empty";for(var d in b){var a=b[d];if("object"!==typeof a||2!==a.length)throw"node must be an array and contain 2 values (name, vertices). Failed at index: "+d;var c=a[0],a=a[1];this.graph[c]=[];for(var e in a){var f=a[e];if("object"!==typeof f||2!==f.length)throw"vertex must be an array and contain 2 values (name, vertices). Failed at index: "+
d+"["+e+"]";this.graph[c][f[0]]=f[1]}}};this.getPath=function(b,d){if("undefined"===typeof this.graph[b])throw"source "+b+" doesn't exist";if("undefined"===typeof this.graph[d])throw"target "+d+" doesn't exist";if(b===d)return[];this.queue=new g;for(var a in this.graph)this.distance[a]=Infinity,this.previous[a]=null,this.queue.update(a,Infinity);this.distance[b]=0;for(this.queue.update(b,0);0<this.queue.count;){a=this.queue.shift().node;if(a===d){for(var c=[];null!==this.previous[a];)c.unshift(a),
a=this.previous[a];return c}if(Infinity==this.distance[a])break;for(c in this.graph[a]){var e=this.distance[a]+this.graph[a][c];e<this.distance[c]&&(this.distance[c]=e,this.previous[c]=a,this.queue.update(c,e))}}return[]};var g=function(){this.queue={};this.count=0;this.first=null;this.shift=function(){return this.remove(this.first)};this.remove=function(b){if("undefined"===typeof this.queue[b])return null;var d=this.queue[b];delete this.queue[b];this.count--;null==d.prev&&(this.first=null,"undefined"!==
typeof this.queue[d.next]&&(this.first=this.queue[d.next].node));"undefined"!==typeof this.queue[d.prev]&&(this.queue[d.prev].next=d.next);"undefined"!==typeof this.queue[d.next]&&(this.queue[d.next].prev=d.prev);return d};this.update=function(b,d){var a="undefined"===typeof this.queue[b];if(a||this.queue[b].distance!=d){if(a)this.count++;else{a=this.queue[b].prev;null!==a&&(this.queue[a].next=this.queue[b].next);var c=this.queue[b].next;null!==c&&(this.queue[c].prev=this.queue[b].prev)}this.queue[b]=
{node:b,distance:d,next:null,prev:null};if(null===this.first)this.first=b;else{a=null;for(c=this.first;null!==c;){if(this.queue[b].distance<=this.queue[c].distance){null==a&&(this.first=b);"undefined"!==typeof this.queue[a]&&(this.queue[a].next=b);"undefined"!==typeof this.queue[c]&&(this.queue[c].prev=b);this.queue[b].prev=a;this.queue[b].next=c;return}a=c;c="undefined"===typeof this.queue[c]?null:this.queue[c].next}this.queue[b].prev=a;this.queue[b].next=c;this.queue[a].next=b}}}}};